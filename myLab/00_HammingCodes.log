In [1]: import numpy as np

In [2]: np.random.randint(0, 2, 16)
Out[2]: array([1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1])

In [3]: bits = np.random.randint(0, 2, 16)

In [4]: enumerate(bits)
Out[4]: <enumerate at 0x25452421100>

In [5]: list(enumerate(bits))
Out[5]:
[(0, 1),
 (1, 0),
 (2, 1),
 (3, 0),
 (4, 0),
 (5, 1),
 (6, 0),
 (7, 1),
 (8, 0),
 (9, 1),
 (10, 0),
 (11, 1),
 (12, 0),
 (13, 1),
 (14, 1),
 (15, 0)]

In [6]: [i for i, bit in enumerate(bits)]
Out[6]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

In [7]: [i for i, bit in enumerate(bits) if bit]
Out[7]: [0, 2, 5, 7, 9, 11, 13, 14]

In [8]: bits
Out[8]: array([1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0])

In [9]: 0 ^ 2 ^ 5 ^ 7 ^ 9 ^ 11 ^ 13 ^ 14
Out[9]: 1

In [10]: from functools import reduce

In [11]: import operator as op

In [12]: reduce(op.xor, [i for i, bit in enumerate(bits) if bit])
Out[12]: 1

In [13]: reduce(lambda x, y: x ^ y, [i for i, bit in enumerate(bits) if bit
    ...: ])
Out[13]: 1

In [14]: bin(1)
Out[14]: '0b1'

In [15]: bits[1] = not bits[1]

In [16]: reduce(lambda x, y: x ^ y, [i for i, bit in enumerate(bits) if bit
    ...: ])
Out[16]: 0

In [17]: bits
Out[17]: array([1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0])

In [18]: bits[10] = not bits[10]

In [19]: reduce(lambda x, y: x ^ y, [i for i, bit in enumerate(bits) if bit
    ...: ])
Out[19]: 10

In [20]: bits[10] = not bits[10]

In [21]: reduce(lambda x, y: x ^ y, [i for i, bit in enumerate(bits) if bit
    ...: ])
Out[21]: 0

In [22]: _ih
Out[22]:
['',
 'import numpy as np',
 'np.random.randint(0, 2, 16)',
 'bits = np.random.randint(0, 2, 16)',
 'enumerate(bits)',
 'list(enumerate(bits))',
 '[i for i, bit in enumerate(bits)]',
 '[i for i, bit in enumerate(bits) if bit]',
 'bits',
 '0 ^ 2 ^ 5 ^ 7 ^ 9 ^ 11 ^ 13 ^ 14',
 'from functools import reduce',
 'import operator as op',
 'reduce(op.xor, [i for i, bit in enumerate(bits) if bit])',
 'reduce(lambda x, y: x ^ y, [i for i, bit in enumerate(bits) if bit])',
 'bin(1)',
 'bits[1] = not bits[1]',
 'reduce(lambda x, y: x ^ y, [i for i, bit in enumerate(bits) if bit])',
 'bits',
 'bits[10] = not bits[10]',
 'reduce(lambda x, y: x ^ y, [i for i, bit in enumerate(bits) if bit])',
 'bits[10] = not bits[10]',
 'reduce(lambda x, y: x ^ y, [i for i, bit in enumerate(bits) if bit])',
 '_ih']